local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marco8642/science/main/ui%20libs2"))()

local example = library:CreateWindow({
   text = "Delivery"
 })
 example:AddLabel("Distance to deliver goods", function(object, focus)
 end)
 example:AddBox("Enter Minimum Distance", function(object, focus)
	if focus then
		getfenv().mdistance = tonumber(object.Text)
	end
end)
example:AddLabel("Select Delivering Method", function(object, focus)
end)
example:AddDropdown({"Tweening","Teleport"},function(state)
   print(state)
getfenv().methodt = state
 end)
example:AddToggle("Auto Delivery[Trailer]", function(state)
   getfenv().test = (state and true or false)
while getfenv().test do
   wait()
if game:GetService("Players").LocalPlayer.PlayerGui.Score.Frame.Jobs.Visible == false then
	local chosenone = nil
	local smaller = 0
	repeat wait()
	for i2,v2 in pairs(game:GetService("Workspace").Jobs.TrailerDelivery.StartPoints:GetChildren()) do
	  if chosenone == nil then
	  local p,call =	pcall(function()
	local payment = 0
	local data =game:GetService("ReplicatedStorage").Systems.Jobs.RequestJobStart:InvokeServer(v2.Parent.Parent, v2)
	local test = {data}
	warn(v2)
	for i,v in pairs(test) do
	if type(v) == "table" and chosenone == nil then
	   task.wait()
	   for a,b in pairs(v) do
		  if a == "DestinationPoint" and (v2:GetAttribute("LocationCFrame").Position-b:GetAttribute("LocationCFrame").Position).magnitude > getfenv().mdistance*3.571 then
			 print((v2:GetAttribute("LocationCFrame").Position-b:GetAttribute("LocationCFrame").Position).magnitude*3.571)
	warn(a,b:GetFullName())
	chosenone = v2
	break
	end
	end
  end
	end
	end)
	if p == false then
	warn(p,call)
	end
  end
	end
until chosenone ~= nil or getfenv().test == false
game:GetService("ReplicatedStorage").Systems.Jobs.StartJob:InvokeServer(workspace.Jobs.TrailerDelivery, chosenone)
repeat  wait()
   print("waiting for trailer")
until game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent.Parent:FindFirstChild("Trailer") or getfenv().test == false

local failnum = 0
repeat wait()
   failnum = failnum +1
   print("waiting for CompletionRegion")
if failnum > 100 then
game:GetService("ReplicatedStorage").Systems.Jobs.QuitJob:InvokeServer()
task.wait()
end
until game:GetService("Workspace"):FindFirstChild("CompletionRegion") or getfenv().test == false or failnum > 100
if game:GetService("Workspace"):FindFirstChild("CompletionRegion") then
   if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-game:GetService("Workspace").CompletionRegion.Primary.Position).magnitude < getfenv().mdistance*3.571 then
      game:GetService("ReplicatedStorage").Systems.Jobs.QuitJob:InvokeServer()
task.wait()
   end
end
pcall(function()
   game.Players.LocalPlayer.Character.Head.Anchored = true
   task.wait(1.5)
   game.Players.LocalPlayer.Character.Head.Anchored = false
   end)
wait()
if game:GetService("Workspace"):FindFirstChild("CompletionRegion") then
local dist = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-game:GetService("Workspace").CompletionRegion.Primary.Position).magnitude
if tonumber(dist/400) > 7 then
   print("Delivery Distance:"..tonumber(dist/3.571).." meters away")
print("Delivery ETA:"..tonumber(dist/400).." seconds")
if getfenv().methodt == "Teleport" then
task.wait(dist/400)
elseif getfenv().methodt == "Tweening" then
   for i,v in pairs(game:GetService("Workspace").Cars:GetDescendants()) do
      if v.Name == "Owner" and v.Value == game.Players.LocalPlayer then
   local TweenService = game:GetService("TweenService")
   local TweenInfoToUse = TweenInfo.new(dist/400, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
   
   local TweenValue = Instance.new("CFrameValue")
   TweenValue.Value = v.Parent:GetPrimaryPartCFrame()
            
   TweenValue.Changed:Connect(function()
      v.Parent:SetPrimaryPartCFrame(TweenValue.Value)
   end)
            
   local OnTween = TweenService:Create(TweenValue, TweenInfoToUse, {Value=game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,100)})
   OnTween:Play()
    OnTween.Completed:Wait()
   end
   end
end
else
   print("Delivery Distance:"..tonumber(dist/3.571).." meters away")
print("Delivery ETA set to:"..tonumber(7).." seconds due to it being too low")
if getfenv().methodt == "Teleport" then
   task.wait(7)
   elseif getfenv().methodt == "Tweening" then
      for i,v in pairs(game:GetService("Workspace").Cars:GetDescendants()) do
         if v.Name == "Owner" and v.Value == game.Players.LocalPlayer then
      local TweenService = game:GetService("TweenService")
      local TweenInfoToUse = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
      
      local TweenValue = Instance.new("CFrameValue")
      TweenValue.Value = v.Parent:GetPrimaryPartCFrame()
               
      TweenValue.Changed:Connect(function()
         v.Parent:SetPrimaryPartCFrame(TweenValue.Value)
      end)
               
      local OnTween = TweenService:Create(TweenValue, TweenInfoToUse, {Value=game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,100)})
      OnTween:Play()
       OnTween.Completed:Wait()
      end
      end
   end
end
end
elseif game:GetService("Players").LocalPlayer.PlayerGui.Score.Frame.Jobs.Visible == true then
for i,v in pairs(game:GetService("Workspace").Cars:GetDescendants()) do
   if v.Name == "Owner" and v.Value == game.Players.LocalPlayer then
      v.Parent:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,-120))
      v.Parent.Trailer:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,100))
      wait(5)
repeat task.wait()
   pcall(function()
   v.Parent:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,-20))
v.Parent.Trailer:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,0))
   end)
    until not v.Parent:FindFirstChild("Trailer") or getfenv().test == false
game:GetService("ReplicatedStorage").Systems.Jobs.CashBankedEarnings:FireServer()
task.wait()
end
end
end
end
end)
example:AddToggle("Auto Delivery[Trucking]", function(state)
getfenv().test2 = (state and true or false)
while getfenv().test2 do
   local plr = game.Players.LocalPlayer
   local cash = game:GetService("ReplicatedStorage").PlayerData[plr.Name].Cash
print(cash)
   if game:GetService("Players").LocalPlayer.PlayerGui.Score.Frame.Jobs.Visible == false then
      local num = math.random(1,#workspace.Jobs.Trucking.StartPoints:GetChildren())
	  local chosenone = nil
	  local smaller = 0
	  repeat wait()
	  for i2,v2 in pairs(game:GetService("Workspace").Jobs.Trucking.StartPoints:GetChildren()) do
		if chosenone == nil then
		local p,call =	pcall(function()
	  local payment = 0
	  local data =game:GetService("ReplicatedStorage").Systems.Jobs.RequestJobStart:InvokeServer(v2.Parent.Parent, v2)
	  local test = {data}
	  warn(v2)
	  for i,v in pairs(test) do
	  if type(v) == "table" and chosenone == nil then
		 task.wait()
		 for a,b in pairs(v) do
			if a == "DestinationPoint" and (v2:GetAttribute("LocationCFrame").Position-b:GetAttribute("LocationCFrame").Position).magnitude > getfenv().mdistance*3.571 then
			   print((v2:GetAttribute("LocationCFrame").Position-b:GetAttribute("LocationCFrame").Position).magnitude*3.571)
	  warn(a,b:GetFullName())
	  chosenone = v2
	  break
	  end
	  end
	end
	  end
	  end)
	  if p == false then
	  warn(p,call)
	  end
	end
	  end
	until chosenone ~= nil or getfenv().test2 == false
  game:GetService("ReplicatedStorage").Systems.Jobs.StartJob:InvokeServer(workspace.Jobs.Trucking, chosenone)
  repeat  wait()
     print("waiting for trailer")
  until game.Players.LocalPlayer.Character.Humanoid.SeatPart.Parent.Parent:FindFirstChild("Trailer") or getfenv().test2 == false
  task.wait()
  local failnum = 0
  repeat wait()
     failnum = failnum +1
     print("waiting for CompletionRegion")
  if failnum > 100 then
   warn("attempt fix in motion")
  game:GetService("ReplicatedStorage").Systems.Jobs.QuitJob:InvokeServer()
  wait(task.wait())
  end
  until game:GetService("Workspace"):FindFirstChild("CompletionRegion") or getfenv().test2 == false or failnum > 100
  wait()
  if game:GetService("Workspace"):FindFirstChild("CompletionRegion") then
   if (chosenone:GetAttribute("LocationCFrame").Position-game:GetService("Workspace").CompletionRegion.Primary.Position).magnitude < getfenv().mdistance*3.571 then
      game:GetService("ReplicatedStorage").Systems.Jobs.QuitJob:InvokeServer()
task.wait()
   end
end
pcall(function()
   game.Players.LocalPlayer.Character.Head.Anchored = true
   task.wait(1.5)
   game.Players.LocalPlayer.Character.Head.Anchored = false
   end)
   if game:GetService("Workspace"):FindFirstChild("CompletionRegion") then
      local dist = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-game:GetService("Workspace").CompletionRegion.Primary.Position).magnitude
      if tonumber(dist/400) > 7 then
         print("Delivery Distance:"..tonumber(dist/3.571).." meters away")
      print("Delivery ETA:"..tonumber(dist/400).." seconds")
      if getfenv().methodt == "Teleport" then
      task.wait(dist/400)
      elseif getfenv().methodt == "Tweening" then
         for i,v in pairs(game:GetService("Workspace").Cars:GetDescendants()) do
            if v.Name == "Owner" and v.Value == game.Players.LocalPlayer then
               v.Parent:PivotTo(v.Parent.PrimaryPart.CFrame+Vector3.new(0,1000,0))
               v.Parent.Trailer:PivotTo(v.Parent.PrimaryPart.CFrame*CFrame.new(0,1000,100))
         local TweenService = game:GetService("TweenService")
         local TweenInfoToUse = TweenInfo.new(dist/400, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
         
         local TweenValue = Instance.new("CFrameValue")
         TweenValue.Value = v.Parent:GetPrimaryPartCFrame()
                  
         TweenValue.Changed:Connect(function()
            v.Parent:SetPrimaryPartCFrame(TweenValue.Value)
         end)
                  
         local OnTween = TweenService:Create(TweenValue, TweenInfoToUse, {Value=game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,1000,100)})
         OnTween:Play()
          OnTween.Completed:Wait()
         end
         end
      end
      else
         print("Delivery Distance:"..tonumber(dist/3.571).." meters away")
      print("Delivery ETA set to:"..tonumber(7).." seconds due to it being too low")
      if getfenv().methodt == "Teleport" then
         task.wait(7)
         elseif getfenv().methodt == "Tweening" then
            for i,v in pairs(game:GetService("Workspace").Cars:GetDescendants()) do
               if v.Name == "Owner" and v.Value == game.Players.LocalPlayer then
                  v.Parent:PivotTo(v.Parent.PrimaryPart.CFrame+Vector3.new(0,1000,0))
                  v.Parent.Trailer:PivotTo(v.Parent.PrimaryPart.CFrame*CFrame.new(0,1000,100))
                  local TweenService = game:GetService("TweenService")
                  local TweenInfoToUse = TweenInfo.new(7, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false, 0)
                  
                  local TweenValue = Instance.new("CFrameValue")
                  TweenValue.Value = v.Parent:GetPrimaryPartCFrame()
                           
                  TweenValue.Changed:Connect(function()
                     v.Parent:SetPrimaryPartCFrame(TweenValue.Value)
                  end)
                           
                  local OnTween = TweenService:Create(TweenValue, TweenInfoToUse, {Value=game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,1000,100)})
                  OnTween:Play()
                   OnTween.Completed:Wait()
            end
            end
         end
      end
      end
elseif game:GetService("Players").LocalPlayer.PlayerGui.Score.Frame.Jobs.Visible == true then
for i,v in pairs(game:GetService("Workspace").Cars:GetDescendants()) do
   if v.Name == "Owner" and v.Value == game.Players.LocalPlayer then
      v.Parent:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,-130))
      v.Parent.Trailer:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,100))
      wait(5)
repeat task.wait()
   pcall(function()
   v.Parent:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,-30))
v.Parent.Trailer:PivotTo(game:GetService("Workspace").CompletionRegion.Primary.CFrame*CFrame.new(0,5,0))
   end)
    until not v.Parent:FindFirstChild("Trailer") or getfenv().test2 == false
game:GetService("ReplicatedStorage").Systems.Jobs.CashBankedEarnings:FireServer()
task.wait()
local time = tick()
repeat task.wait()
until cash ~= game:GetService("ReplicatedStorage").PlayerData[plr.Name].Cash.Value or tick()-time > 5
print(tick()-time)
if cash == game:GetService("ReplicatedStorage").PlayerData[plr.Name].Cash.Value then
   game:GetService("ReplicatedStorage").Systems.Jobs.QuitJob:InvokeServer()
   wait(5)
   end
end
end
end
end
end)
